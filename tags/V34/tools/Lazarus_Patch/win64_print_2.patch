--- components/printers/win32/winprndialogs.inc	2011/04/13 09:09:32	30283
+++ components/printers/win32/winprndialogs.inc	2011/04/13 09:32:14	30284
@@ -1,6 +1,6 @@
 {%MainUnit ../printersdlgs.pp}
 
-function PrintHookProc(hdlg: HWND; uiMsg: UINT; wParam: WPARAM; lParam: LPARAM): PtrUInt; stdcall;
+function PrintHookProc(hdlg: HWND; uiMsg: UINT; wParam: WPARAM; lParam: LPARAM): UINT_PTR; stdcall;
 
   // update from win32wsdialogs.pp
   procedure Reposition(ADialogWnd: Handle);
@@ -39,42 +39,45 @@
 
 function TPageSetupDialog.Execute: Boolean;
 var
-    lpp        : tagPSD;
-    PDev       : TPrinterDevice;
-    DevMode    : PDeviceMode;
-    DeviceMode : THandle;
-    DevNames   : PDevNames;
-    St         : PChar;
+  lpp        : tagPSD;
+  PDev       : TPrinterDevice;
+  DevMode    : PDeviceMode;
+  DeviceMode : THandle;
+  DevNames   : PDevNames;
+  St         : PChar;
 begin
-  Result:=False;
+  Result := False;
   if not Assigned(Printer) then Exit;
-  if Printer.Printers.Count>0 then
+  if Printer.Printers.Count > 0 then
   begin
-    FillChar(lpp,SizeOf(lpp),0);
-    with lpp do begin
-      lStructSize:=SizeOf(lpp);
-      hInstance:=System.HInstance;
+    FillChar(lpp, SizeOf(lpp), 0);
+    with lpp do
+    begin
+      lStructSize := SizeOf(lpp);
+      hInstance := System.HInstance;
       lpfnPageSetupHook := @PrintHookProc;
       Flags := PSD_MARGINS or PSD_ENABLEPAGESETUPHOOK;
-      hWndOwner:=Widgetset.AppHandle;
+      hWndOwner := Widgetset.AppHandle;
       rtMargin := fMargins;
-      PDev:=TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
+      PDev := TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
       // Pdev.DevMode has the required size, just copy to the global memory
-      DeviceMode:=GLobalAlloc(GHND, PDev.DevModeSize);
+      DeviceMode := GLobalAlloc(GHND, PDev.DevModeSize);
       try
-        DevMode:=PDeviceMode(GlobalLock(DeviceMode));
+        DevMode := PDeviceMode(GlobalLock(DeviceMode));
         try
           CopyMemory(DevMode, PDev.DevMode, Pdev.DevModeSize);
         finally
           GlobalUnlock(DeviceMode);
         end;
-        hDevMode:=DeviceMode;
-        if PageSetupDlg(Lpp) then begin
-          St :='';
-          if Lpp.HdevNames<>0 then begin
-            DevNames:=PDevNames(GlobalLock(lpp.hDevNames));
+        hDevMode := DeviceMode;
+        if PageSetupDlg(@Lpp) then
+        begin
+          St := '';
+          if Lpp.HdevNames <> 0 then
+          begin
+            DevNames := PDevNames(GlobalLock(lpp.hDevNames));
             try
-              St:=PChar(DevNames)+DevNames^.wDeviceOffset;
+              St := PChar(DevNames) + DevNames^.wDeviceOffset;
               Printer.SetPrinter(St);
             finally
               GlobalUnlock(lpp.hDevNames);
@@ -89,13 +92,13 @@
             fUnits := unInch;
           fMargins := rtMargin;
 
-          if lpp.hDevMode<>0 then
+          if lpp.hDevMode <> 0 then
           begin
-            DevMode:=PDeviceMode(GlobalLock(lpp.hDevMode));
+            DevMode := PDeviceMode(GlobalLock(lpp.hDevMode));
             try
               //Set the properties for the selected printer
-              PDev:=TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
-              CopyMemory(PDev.DevMode,DevMode,PDev.DevModeSize);
+              PDev := TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
+              CopyMemory(PDev.DevMode, DevMode, PDev.DevModeSize);
             finally
               GlobalUnlock(lpp.hDevMode);
            end;
@@ -113,45 +116,45 @@
 
 function TPrinterSetupDialog.Execute: Boolean;
 var
-    lpp        : tagPD;
-    PDev       : TPrinterDevice;
-    DevMode    : PDeviceMode;
-    DeviceMode : THandle;
-    DevNames   : PDevNames;
-    St         : PChar;
+  lpp        : tagPD;
+  PDev       : TPrinterDevice;
+  DevMode    : PDeviceMode;
+  DeviceMode : THandle;
+  DevNames   : PDevNames;
+  St         : PChar;
 begin
   Result:=False;
   if not Assigned(Printer) then Exit;
   if Printer.Printers.Count>0 then
   begin
-    FillChar(lpp,SizeOf(lpp),0);
+    FillChar(lpp, SizeOf(lpp), 0);
     with lpp do
     begin
-      lStructSize:=SizeOf(lpp);
-      hInstance:=System.HInstance;
+      lStructSize := SizeOf(lpp);
+      hInstance := System.HInstance;
       lpfnSetupHook := @PrintHookProc;
-      Flags:= PD_PRINTSETUP or PD_RETURNDC or PD_ENABLESETUPHOOK;
-      hWndOwner:=Widgetset.AppHandle;
-      PDev:=TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
+      Flags := PD_PRINTSETUP or PD_RETURNDC or PD_ENABLESETUPHOOK;
+      hWndOwner := Widgetset.AppHandle;
+      PDev := TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
       // Pdev.DevMode has the required size, just copy to the global memory
-      DeviceMode:=GlobalAlloc(GHND, PDev.DevModeSize);
+      DeviceMode := GlobalAlloc(GHND, PDev.DevModeSize);
       try
-        DevMode:=PDeviceMode(GlobalLock(DeviceMode));
+        DevMode := PDeviceMode(GlobalLock(DeviceMode));
         try
           CopyMemory(DevMode, Pdev.DevMode, Pdev.DevModeSize);
         finally
           GlobalUnlock(DeviceMode);
         end;
         hDevMode := DeviceMode;
-        if PrintDlg(lpp) then
+        if PrintDlg(@lpp) then
         begin
-          St:='';
+          St := '';
           //Change Selected printer
-          if lpp.hDevNames<>0 then
+          if lpp.hDevNames <> 0 then
           begin
-            DevNames:=PDevNames(GlobalLock(lpp.hDevNames));
+            DevNames := PDevNames(GlobalLock(lpp.hDevNames));
             try
-              St:=PChar(DevNames)+DevNames^.wDeviceOffset;
+              St := PChar(DevNames) + DevNames^.wDeviceOffset;
               Printer.SetPrinter(St);
             finally
               GlobalUnlock(lpp.hDevNames);
@@ -159,15 +162,15 @@
             end;
           end;
 
-          Result:=True;
+          Result := True;
 
-          if lpp.hDevMode<>0 then
+          if lpp.hDevMode <> 0 then
           begin
-            DevMode:=PDeviceMode(GlobalLock(lpp.hDevMode));
+            DevMode := PDeviceMode(GlobalLock(lpp.hDevMode));
             try
               //Set the properties for the selected printer
-              PDev:=TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
-              CopyMemory(PDev.DevMode,DevMode,PDev.DevModeSize);
+              PDev := TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
+              CopyMemory(PDev.DevMode, DevMode, PDev.DevModeSize);
               TWinPrinter(Printer).Handle := hDC;
             finally
               GlobalUnlock(lpp.hDevMode);
@@ -185,31 +188,33 @@
 { TPrintDialog }
 
 function TPrintDialog.Execute: Boolean;
-var lpp        : tagPD;
-    PDev       : TPrinterDevice;
-    DevMode    : PDeviceMode;
-    DeviceMode : THandle;
-    DevNames   : PDevNames;
-    St         : PChar;
+var
+  lpp        : tagPD;
+  PDev       : TPrinterDevice;
+  DevMode    : PDeviceMode;
+  DeviceMode : THandle;
+  DevNames   : PDevNames;
+  St         : PChar;
 begin
-  Result:=False;
+  Result := False;
   if not Assigned(Printer) then Exit;
-  if Printer.Printers.Count>0 then
+  if Printer.Printers.Count > 0 then
   begin
-    FillChar(lpp,SizeOf(lpp),0);
+    FillChar(lpp, SizeOf(lpp), 0);
     with lpp do
     begin
-      lStructSize:=SizeOf(lpp);
-      hInstance:=System.HInstance;
+      lStructSize := SizeOf(lpp);
+      hInstance := System.HInstance;
       lpfnPrintHook := @PrintHookProc;
       lpfnSetupHook := @PrintHookProc;
       Flags := PD_ENABLEPRINTHOOK or PD_ENABLESETUPHOOK;
       if not Printer.RawMode then
         Flags := Flags or PD_RETURNDC;
-      if Collate then Flags := Flags or PD_COLLATE;
+      if Collate then
+        Flags := Flags or PD_COLLATE;
       case PrintRange of
-       prPageNums : Flags := Flags or PD_PAGENUMS;
-       prSelection : Flags := Flags or PD_SELECTION;
+        prPageNums: Flags := Flags or PD_PAGENUMS;
+        prSelection: Flags := Flags or PD_SELECTION;
       end;
 
       if PrintToFile  then Flags := Flags or PD_PRINTTOFILE;
@@ -220,35 +225,35 @@
       if (poHelp in Options) then Flags := Flags or PD_SHOWHELP;
       if not (poWarning in Options) then Flags := Flags or PD_NOWARNING;
       
-      hWndOwner:=Widgetset.AppHandle;
-      PDev:=TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
+      hWndOwner := Widgetset.AppHandle;
+      PDev := TPrinterDevice(Printer.Printers.Objects[Printer.PrinterIndex]);
       // Pdev.DevMode has the required size, just copy to the global memory
-      DeviceMode:=GlobalAlloc(GHND, PDEV.DevModeSize);
+      DeviceMode := GlobalAlloc(GHND, PDEV.DevModeSize);
       try
-        DevMode:=PDeviceMode(GlobalLock(DeviceMode));
+        DevMode := PDeviceMode(GlobalLock(DeviceMode));
         try
           CopyMemory(DevMode, PDev.DevMode, PDev.DevModeSize);
         finally
           GlobalUnlock(DeviceMode);
         end;
         
-        hDevMode:= DeviceMode;
-        nCopies:= Word(Copies);
+        hDevMode := DeviceMode;
+        nCopies := Word(Copies);
         nFromPage := Word(FromPage);
         nToPage := Word(ToPage);
         nMinPage := Word(MinPage);
         nMaxPage := Word(MaxPage);
         DevMode^.dmCopies := nCopies;
         
-        if PrintDlg(lpp) then
+        if PrintDlg(@lpp) then
         begin
           St:='';
           //Change Selected printer
-          if lpp.hDevNames<>0 then
+          if lpp.hDevNames <> 0 then
           begin
-            DevNames:=PDevNames(GlobalLock(lpp.hDevNames));
+            DevNames := PDevNames(GlobalLock(lpp.hDevNames));
             try
-              St:=PChar(DevNames)+DevNames^.wDeviceOffset;
+              St := PChar(DevNames) + DevNames^.wDeviceOffset;
               Printer.SetPrinter(St);
             finally
               GlobalUnlock(lpp.hDevNames);
